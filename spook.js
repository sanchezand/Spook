/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var spook = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,2],$V1=[1,13],$V2=[1,12],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[5,8,31,35,37,38,40,41,42,43,44,45,46,51,52,54],$Ve=[1,25],$Vf=[1,40],$Vg=[1,33],$Vh=[1,38],$Vi=[1,39],$Vj=[1,36],$Vk=[1,37],$Vl=[5,8,9,18,21,25,31,35,36,37,38,40,41,42,43,44,45,46,51,52,54,55],$Vm=[5,8,9,18,21,25,31,35,36,37,38,40,41,42,43,44,45,46,51,52,54,55,62,63,64,65],$Vn=[5,8,9,18,21,25,31,35,36,37,38,40,41,42,43,44,45,46,51,52,54,55,58,59,62,63,64,65],$Vo=[5,8,9,18,21,25,31,35,36,37,38,40,41,42,43,44,45,46,51,52,54,55,58,59,60,61,62,63,64,65],$Vp=[8,17,27,28,58,59],$Vq=[1,80],$Vr=[1,81],$Vs=[1,87],$Vt=[2,15],$Vu=[8,31,35,37,40,41,42,43,44,45,46,51,52,54],$Vv=[8,31,35,37,40,41,42,43,44,45,46,51,54],$Vw=[5,8,18,21,27,31,35,37,38,40,41,42,43,44,45,46,51,52,54],$Vx=[2,40],$Vy=[1,113];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start":3,"statements":4,"EOF":5,"statement":6,"assign":7,"NAME":8,"ASSIGN":9,"expression":10,"exp":11,"compOp":12,"termino":13,"addSub":14,"factor":15,"multDiv":16,"(":17,")":18,"val":19,"fcargs2":20,",":21,"fcargs1":22,"fcargs":23,"{":24,"}":25,"functioncall":26,"NUMBER":27,"BOOLEAN":28,"idlist":29,"vars":30,"DEF":31,":":32,"type":33,"conditional":34,"IF":35,"THEN":36,"END":37,"ELSE":38,"actions":39,"FORWARD":40,"ROTRIGHT":41,"PICKUP":42,"PUTDOWN":43,"DETECT_BOX":44,"DETECT_WALL":45,"INVENTORY":46,"funparams":47,"funparams1":48,"funparams2":49,"function":50,"FUNCTION":51,"return":52,"loop":53,"REPEAT":54,"DO":55,"DECIMAL":56,"BOOL":57,"+":58,"-":59,"*":60,"/":61,"EQUALS":62,"GTRTHN":63,"LESTHN":64,"NOT":65,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"NAME",9:"ASSIGN",17:"(",18:")",21:",",24:"{",25:"}",27:"NUMBER",28:"BOOLEAN",31:"DEF",32:":",35:"IF",36:"THEN",37:"END",38:"ELSE",40:"FORWARD",41:"ROTRIGHT",42:"PICKUP",43:"PUTDOWN",44:"DETECT_BOX",45:"DETECT_WALL",46:"INVENTORY",51:"FUNCTION",52:"return",54:"REPEAT",55:"DO",56:"DECIMAL",57:"BOOL",58:"+",59:"-",60:"*",61:"/",62:"EQUALS",63:"GTRTHN",64:"LESTHN",65:"NOT"},
productions_: [0,[3,2],[4,0],[4,2],[7,3],[7,4],[10,1],[10,3],[11,1],[11,3],[13,1],[13,3],[15,3],[15,2],[15,1],[20,0],[20,3],[22,0],[22,2],[23,3],[26,2],[19,1],[19,1],[19,1],[29,1],[29,3],[30,4],[30,5],[34,5],[34,7],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[47,2],[47,3],[48,4],[49,0],[49,5],[50,7],[50,5],[53,5],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[33,1],[33,1],[14,1],[14,1],[16,1],[16,1],[12,1],[12,1],[12,1],[12,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 5: case 34: case 46:

		
	
break;
case 4:

		console.log('ASSIGN')
		console.log($$[$0-2]);
		console.log($$[$0]);
	
break;
case 6:

		this.$ = $$[$0];
		console.log($$[$0])
	
break;
case 7:

		switch($$[$0-1]){
			case '>': return this.$ = $$[$0-2] > $$[$0];
			case '<': return this.$ = $$[$0-2] < $$[$0];
			case '==': return this.$ = $$[$0-2] == $$[$0];
			case 'NOT': return this.$ = $$[$0-2] != $$[$0];
		}
	
break;
case 8: case 10: case 14:

		this.$ = $$[$0]
	
break;
case 9:

		switch($$[$0-1]){
			case '+': return this.$ = $$[$0-2] + $$[$0];
			case '-': return this.$ = $$[$0-2] - $$[$0];
		}
	
break;
case 11:

		switch($$[$0-1]){
			case '*': return this.$ = $$[$0-2] * $$[$0];
			case '/': return this.$ = $$[$0-2] / $$[$0];
		}
	
break;
case 13:

		console.log($$[$0-1], $$[$0])
	
break;
case 21:

		this.$ = parseFloat($$[$0])
	
break;
case 22:

		this.$ = $$[$0] === 'true'
	
break;
case 23:

		// CHECK VARS TABLE TO GET VALUE
	
break;
case 26: case 35:


	
break;
case 30:

		// yy.moves.push(0);
	
break;
case 31:

		// yy.moves.push(1);
	
break;
case 32:

		// yy.moves.push(2);
	
break;
case 33:

		// yy.moves.push(3);
	
break;
case 36:

		this.$ = yy.inventory
	
break;
}
},
table: [o([5,8,31,35,40,41,42,43,44,45,46,51,54],$V0,{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:6,8:$V1,26:8,30:5,31:$V2,34:7,35:$V3,39:9,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,50:10,51:$Vb,53:11,54:$Vc},{1:[2,1]},o($Vd,[2,3]),o($Vd,[2,45]),o($Vd,[2,46]),o($Vd,[2,47]),o($Vd,[2,48]),o($Vd,[2,49]),o($Vd,[2,50]),o($Vd,[2,51]),{8:$Ve,29:24},{8:$Vf,9:[1,26],10:27,11:29,13:31,14:34,15:32,17:$Vg,19:35,23:28,24:[1,30],27:$Vh,28:$Vi,58:$Vj,59:$Vk},{8:$Vf,10:41,11:29,13:31,14:34,15:32,17:$Vg,19:35,27:$Vh,28:$Vi,58:$Vj,59:$Vk},{17:[1,42]},{17:[1,43]},{17:[1,44]},{17:[1,45]},{17:[1,46]},{17:[1,47]},{17:[1,48]},{8:[1,49]},{8:$Vf,10:50,11:29,13:31,14:34,15:32,17:$Vg,19:35,27:$Vh,28:$Vi,58:$Vj,59:$Vk},{32:[1,51]},{21:[1,52],32:[2,24]},{8:$Vf,10:53,11:29,13:31,14:34,15:32,17:$Vg,19:35,27:$Vh,28:$Vi,58:$Vj,59:$Vk},{9:[1,54]},o($Vd,[2,20]),o($Vl,[2,6],{12:55,62:[1,56],63:[1,57],64:[1,58],65:[1,59]}),{8:$Vf,10:61,11:29,13:31,14:34,15:32,17:$Vg,19:35,22:60,25:[2,17],27:$Vh,28:$Vi,58:$Vj,59:$Vk},o($Vm,[2,8],{14:62,58:$Vj,59:$Vk}),o($Vn,[2,10],{16:63,60:[1,64],61:[1,65]}),{8:$Vf,10:66,11:29,13:31,14:34,15:32,17:$Vg,19:35,27:$Vh,28:$Vi,58:$Vj,59:$Vk},{8:$Vf,19:67,27:$Vh,28:$Vi},o($Vo,[2,14]),o($Vp,[2,54]),o($Vp,[2,55]),o($Vo,[2,21]),o($Vo,[2,22]),o($Vo,[2,23]),{36:[1,68]},{18:[1,69]},{18:[1,70]},{18:[1,71]},{18:[1,72]},{18:[1,73]},{18:[1,74]},{18:[1,75]},{17:[1,77],47:76},{55:[1,78]},{33:79,56:$Vq,57:$Vr},{8:$Ve,29:82},o($Vd,[2,4]),{8:$Vf,10:83,11:29,13:31,14:34,15:32,17:$Vg,19:35,27:$Vh,28:$Vi,58:$Vj,59:$Vk},{8:$Vf,11:84,13:31,14:34,15:32,17:$Vg,19:35,27:$Vh,28:$Vi,58:$Vj,59:$Vk},o($Vp,[2,58]),o($Vp,[2,59]),o($Vp,[2,60]),o($Vp,[2,61]),{25:[1,85]},{20:86,21:$Vs,25:$Vt},{8:$Vf,11:88,13:31,14:34,15:32,17:$Vg,19:35,27:$Vh,28:$Vi,58:$Vj,59:$Vk},{8:$Vf,13:89,14:34,15:32,17:$Vg,19:35,27:$Vh,28:$Vi,58:$Vj,59:$Vk},o($Vp,[2,56]),o($Vp,[2,57]),{18:[1,90]},o($Vo,[2,13]),o([8,31,35,37,38,40,41,42,43,44,45,46,51,54],$V0,{4:91}),o($Vd,[2,30]),o($Vd,[2,31]),o($Vd,[2,32]),o($Vd,[2,33]),o($Vd,[2,34]),o($Vd,[2,35]),o($Vd,[2,36]),o($Vu,$V0,{4:92}),{8:[1,95],18:[1,93],48:94},o($Vv,$V0,{4:96}),o($Vd,[2,26],{27:[1,97]}),o($Vw,[2,52]),o($Vw,[2,53]),{32:[2,25]},o($Vd,[2,5]),o($Vl,[2,7]),o($Vd,[2,19]),{25:[2,18]},{8:$Vf,10:98,11:29,13:31,14:34,15:32,17:$Vg,19:35,27:$Vh,28:$Vi,58:$Vj,59:$Vk},o($Vm,[2,9]),o($Vn,[2,11]),o($Vo,[2,12]),{6:4,7:6,8:$V1,26:8,30:5,31:$V2,34:7,35:$V3,37:[1,99],38:[1,100],39:9,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,50:10,51:$Vb,53:11,54:$Vc},{6:4,7:6,8:$V1,26:8,30:5,31:$V2,34:7,35:$V3,37:[1,102],39:9,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,50:10,51:$Vb,52:[1,101],53:11,54:$Vc},o($Vu,[2,37]),{18:[1,103]},{32:[1,104]},{6:4,7:6,8:$V1,26:8,30:5,31:$V2,34:7,35:$V3,37:[1,105],39:9,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,50:10,51:$Vb,53:11,54:$Vc},o($Vd,[2,27]),{20:106,21:$Vs,25:$Vt},o($Vd,[2,28]),o($Vv,$V0,{4:107}),{8:$Vf,10:108,11:29,13:31,14:34,15:32,17:$Vg,19:35,27:$Vh,28:$Vi,58:$Vj,59:$Vk},o($Vd,[2,43]),o($Vu,[2,38]),{33:109,56:$Vq,57:$Vr},o($Vd,[2,44]),{25:[2,16]},{6:4,7:6,8:$V1,26:8,30:5,31:$V2,34:7,35:$V3,37:[1,110],39:9,40:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,50:10,51:$Vb,53:11,54:$Vc},{37:[1,111]},{18:$Vx,21:$Vy,49:112},o($Vd,[2,29]),o($Vd,[2,42]),{18:[2,39]},{8:[1,114]},{32:[1,115]},{33:116,56:$Vq,57:$Vr},{18:$Vx,21:$Vy,49:117},{18:[2,41]}],
defaultActions: {3:[2,1],82:[2,25],86:[2,18],106:[2,16],112:[2,39],117:[2,41]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 28
break;
case 2:return 31
break;
case 3:return 60
break;
case 4:return 61
break;
case 5:return 59
break;
case 6:return 58
break;
case 7:return 17
break;
case 8:return 18
break;
case 9:return 21
break;
case 10:return 32
break;
case 11:return '['
break;
case 12:return 9
break;
case 13:return ']'
break;
case 14:return 56
break;
case 15:return 57
break;
case 16:return 35
break;
case 17:return 36
break;
case 18:return 37
break;
case 19:return 38
break;
case 20:return 62
break;
case 21:return 63
break;
case 22:return 64
break;
case 23:return 65
break;
case 24:return 51
break;
case 25:return 'RETURN'
break;
case 26:return 54
break;
case 27:return 55
break;
case 28:return 'OUT'
break;
case 29:return 40
break;
case 30:return 41
break;
case 31:return 42
break;
case 32:return 43
break;
case 33:return 44
break;
case 34:return 45
break;
case 35:return 46
break;
case 36:return 27
break;
case 37:return 8
break;
case 38:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:(true|false))/,/^(?:def\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:\[)/,/^(?:=)/,/^(?:\])/,/^(?:decimal\b)/,/^(?:bool\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:end\b)/,/^(?:else\b)/,/^(?:==)/,/^(?:>)/,/^(?:<)/,/^(?:NOT\b)/,/^(?:fun\b)/,/^(?:return\b)/,/^(?:repeat\b)/,/^(?:do\b)/,/^(?:OUT\b)/,/^(?:forward\b)/,/^(?:rotateRight\b)/,/^(?:pickUp\b)/,/^(?:putDown\b)/,/^(?:detectBox\b)/,/^(?:detectWall\b)/,/^(?:inventory\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z][a-zA-Z_]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = spook;
exports.Parser = spook.Parser;
exports.parse = function () { return spook.parse.apply(spook, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}