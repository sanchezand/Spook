/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var spook = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,11,70],$V1=[2,3],$V2=[1,7],$V3=[1,9],$V4=[1,13],$V5=[11,19,52,54,57,58,59,60,61,62,63,64,65,74,79],$V6=[2,5],$V7=[1,28],$V8=[1,29],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[1,30],$Vj=[1,27],$Vk=[1,44],$Vl=[1,45],$Vm=[11,19,45,47,52,54,57,58,59,60,61,62,63,64,65,74,79],$Vn=[16,19,34,37,38,62,63,64,65],$Vo=[2,30],$Vp=[1,50],$Vq=[1,51],$Vr=[11,17,19,35,37,43,45,47,49,52,54,57,58,59,60,61,62,63,64,65,74,76,79,83,84,85,86,87,88,89,90,91,92,93],$Vs=[6,11,19,45,47,52,54,57,58,59,60,61,62,63,64,65,70,74,79],$Vt=[6,11,15,19,35,43,45,47,52,54,57,58,59,60,61,62,63,64,65,70,74,79],$Vu=[1,75],$Vv=[1,78],$Vw=[1,72],$Vx=[1,74],$Vy=[1,76],$Vz=[2,21],$VA=[11,17,19,35,43,45,47,49,52,54,57,58,59,60,61,62,63,64,65,74,76,79],$VB=[2,11],$VC=[1,98],$VD=[1,99],$VE=[1,100],$VF=[1,101],$VG=[1,102],$VH=[1,103],$VI=[1,104],$VJ=[1,105],$VK=[11,17,19,35,37,43,45,47,49,52,54,57,58,59,60,61,62,63,64,65,74,76,79,83,86,87,88,89,90,91,92,93],$VL=[2,45],$VM=[11,17,19,35,43,45,47,49,52,54,57,58,59,60,61,62,63,64,65,74,76,79,86,87,88,89,90,91,92,93],$VN=[2,22],$VO=[2,33],$VP=[1,132],$VQ=[2,61],$VR=[1,137],$VS=[2,29],$VT=[45,47,54],$VU=[2,46],$VV=[45,54],$VW=[2,41],$VX=[1,161];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"begin":3,"start":4,"declarations":5,"EOF":6,"declaration":7,"statements":8,"statement":9,"vars":10,"DEF":11,"idlist":12,":":13,"type":14,"[":15,"NUMBER":16,"]":17,"assign":18,"NAME":19,"assignOp":20,"expression":21,"startP":22,"endP":23,"compList2":24,"compOp":25,"exp":26,"compList":27,"termino":28,"postTermino":29,"addSub":30,"factor":31,"postFactor":32,"multDiv":33,"(":34,")":35,"val":36,"-":37,"BOOLEAN":38,"id":39,"queries":40,"expressionlist":41,"expressionlist2":42,",":43,"conditionalElse":44,"ELSE":45,"conditionalElseIf":46,"ELSEIF":47,"startIf":48,"THEN":49,"endIf":50,"conditional":51,"IF":52,"beginIf":53,"END":54,"else":55,"actions":56,"FORWARD":57,"ROTRIGHT":58,"PICKUP":59,"PUTDOWN":60,"OUT":61,"DETECT_BOX":62,"DETECT_WALL":63,"INVENTORY":64,"LEN":65,"funparams":66,"funparams1":67,"funparams2":68,"declareFunction":69,"FUNCTION":70,"function":71,"endFunc":72,"loop":73,"REPEAT":74,"defineLoop":75,"DO":76,"startLoop":77,"endLoop":78,"RETURN":79,"setReturn":80,"DECIMAL":81,"BOOL":82,"+":83,"*":84,"/":85,"EQUALS":86,"GTRTHN":87,"LESTHN":88,"GTR_EQTHN":89,"LESS_EQTHN":90,"AND":91,"OR":92,"NOT":93,"ASSIGN":94,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",11:"DEF",13:":",15:"[",16:"NUMBER",17:"]",19:"NAME",34:"(",35:")",37:"-",38:"BOOLEAN",43:",",45:"ELSE",47:"ELSEIF",49:"THEN",52:"IF",54:"END",57:"FORWARD",58:"ROTRIGHT",59:"PICKUP",60:"PUTDOWN",61:"OUT",62:"DETECT_BOX",63:"DETECT_WALL",64:"INVENTORY",65:"LEN",70:"FUNCTION",74:"REPEAT",76:"DO",79:"RETURN",81:"DECIMAL",82:"BOOL",83:"+",84:"*",85:"/",86:"EQUALS",87:"GTRTHN",88:"LESTHN",89:"GTR_EQTHN",90:"LESS_EQTHN",91:"AND",92:"OR",93:"NOT",94:"ASSIGN"},
productions_: [0,[3,0],[4,3],[5,0],[5,2],[8,0],[8,2],[10,4],[10,7],[18,3],[18,8],[24,0],[24,3],[27,2],[21,1],[26,2],[26,4],[29,0],[28,2],[28,4],[32,0],[22,0],[23,0],[31,5],[31,1],[36,2],[36,1],[36,1],[36,1],[39,6],[39,1],[39,1],[39,6],[42,0],[42,3],[41,0],[41,2],[12,1],[12,3],[44,0],[44,2],[46,0],[46,7],[51,10],[53,0],[48,0],[50,0],[55,0],[56,3],[56,3],[56,3],[56,3],[56,4],[40,3],[40,3],[40,3],[40,4],[66,2],[66,3],[67,4],[67,7],[68,0],[68,5],[68,8],[69,3],[71,3],[72,1],[73,8],[75,0],[77,0],[78,0],[7,1],[7,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[80,0],[14,1],[14,1],[30,1],[30,1],[33,1],[33,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	begin();
	addQuad(OPERATIONS.ERA, 'start', -1, -1);
	addQuad(OPERATIONS.GOSUB, -1, -1, null);

break;
case 2:

		// console.log(VARS);
		// for(var i of FUNCS){
		// 	console.log(i.name, i.vars);
		// }
		// // console.log(FUNCS);
		// // console.log(QUADS);
		var j = 0;
		// for(var i of QUADS){
		// 	console.log(`${j}:\t ${opGetSymbol(i[0])}\t${i[1]}\t${i[2]}\t${i[3]}\t`)
		// 	j++;
		// }
		return {
			quads: QUADS,
			// pretty: prettyQuads(),
			funcs: FUNCS,
			vars: VARS,
			const: CONST
		};
	
break;
case 7:

		for(var i of $$[$0-2]){
			var added = defineVariable(i, $$[$0]);
			if(!added) {
				// THROW ERROR
			}

		}
	
break;
case 8:

		for(var i of $$[$0-5]){
			var added = defineVariable(i, $$[$0-3], parseInt($$[$0-1]))
			if(!added){
				// THROW ERROR
			}
		}
	
break;
case 9:

		var assignVar = getVariableFromName($$[$0-2]);
		if(!assignVar){
			// THROW ERROR
			throw new Error('No such var '+$$[$0-2] + ' - LINE: '+_$[$0-2].first_line);
		}
		if(assignVar.array){
			// THROW ERROR
			throw new Error('Var is array '+assignVar.name + ' - LINE: '+_$[$0-2].first_line);
		}
		addQuad(OPERATIONS.ASSIGN, $$[$0].dir, -1, assignVar.dir);
	
break;
case 10:

		var assignVar = getVariableFromName($$[$0-7]);
		if(!assignVar){
			throw new Error('No such var '+$$[$0-7] + ' - LINE: '+_$[$0-7].first_line);
		}
		if(!assignVar.array){
			throw new Error('Var is not array '+assignVar.name + ' - LINE: '+_$[$0-7].first_line);
		}
		var t = addTemp();
		addQuad(OPERATIONS.VERIFY, $$[$0-4].dir, 0, assignVar.size-1);
		addQuad(OPERATIONS.SUM, $$[$0-4].dir, addConstant(assignVar.dir), t);
		valStack.pop();
		addQuad(OPERATIONS.ASSIGN, $$[$0].dir, -1, t+1000000);
	
break;
case 11: case 33: case 57: case 61:

		this.$ = []
	
break;
case 12:

		this.$ = [ [$$[$0-2], $$[$0-1].dir], ...$$[$0] ]
		opStack.pop();
		valStack.pop();
	
break;
case 13:

		this.$ = [$$[$0-1].dir, ...$$[$0]]

		if($$[$0].length>0){
			valStack.pop();
		}
	
break;
case 14:

		var arr = $$[$0].slice(1);
		var init = $$[$0][0];
		for(var i of arr){
			var t = addTemp();
			addQuad(i[0], init, i[1], t);
			init = t;
		}
		if(arr.length>0){
			valStack.push(init);
			this.$ = { dir: init };
		}else{
			this.$ = { dir: valStack[valStack.length-1] }
		}
	
break;
case 15: case 18:

		this.$ = ($$[$0] || $$[$0-1])
	
break;
case 17:

		if([OPERATIONS.SUM, OPERATIONS.MINUS].indexOf(opStack[opStack.length-1])!=-1){
			this.$ = generateQuad();
		}else this.$ = false;
	
break;
case 20:

		if([OPERATIONS.MULT, OPERATIONS.DIVIDE].indexOf(opStack[opStack.length-1])!=-1){
			this.$ = generateQuad();
		}else this.$ = false;
	
break;
case 21:

	opStack.push('(')

break;
case 22:

	var p = opStack.pop();
	if(p!='('){
		throw new Error('Popped was not ( - ' + p);
	}

break;
case 23:

		this.$ = $$[$0-2];
	
break;
case 24:

		valStack.push($$[$0].dir);
	
break;
case 25:

		var dir = addConstant(-1*$$[$0]);
		this.$ = { dir }
	
break;
case 26:

		var dir = addConstant(parseFloat($$[$0]));
		this.$ = { dir };
	
break;
case 27:

		var dir = addConstant($$[$0] == 'true');
		this.$ = { dir };
	
break;
case 29:

		var val = getVariableFromName($$[$0-5]);
		if(!val){
			// THROW ERROR
			throw new Error('No such var '+$$[$0-5] + ' - LINE: '+_$[$0-5].first_line);
		}
		if(!val.array){
			// THROW ERROR
			throw new Error('Var is not array');
		}
		var t = addTemp();
		addQuad(OPERATIONS.VERIFY, $$[$0-2].dir, 0, val.size-1);
		addQuad(OPERATIONS.SUM, $$[$0-2].dir, addConstant(val.dir), t);
		valStack.pop();
		this.$ = { dir: t+1000000 }
	
break;
case 30:

		var val = getVariableFromName($$[$0]);
		this.$ = val;
	
break;
case 32:

		var fc = functionCall($$[$0-5], $$[$0-2]);
		if(fc.return){
			var t = addTemp();
			addQuad(OPERATIONS.ASSIGN, fc.name, -1, t);
			this.$ = { dir: t }
		}else{
			this.$ = fc;
		}
	
break;
case 34:

		this.$ = [ $$[$0-1], ...$$[$0] ]
	
break;
case 35:
 // Empty expression list
		this.$ = []
	
break;
case 36:

		this.$ = [$$[$0-1], ...$$[$0]]
	
break;
case 37:

		this.$ = [ $$[$0] ];
	
break;
case 38:

		this.$ = [$$[$0-2], ...$$[$0]]
	
break;
case 43:

		for(i of elseStack[elseStack.length-1]){
			QUADS[i][3] = count;
		}
		elseStack.pop();
	
break;
case 44:

	elseStack.push([]);

break;
case 45:

	startIf();

break;
case 46:

	elseStack[elseStack.length-1].push(count);
	addQuad(OPERATIONS.GOTO, -1, -1, null);
	endIf();

break;
case 47:

	elseIf();

break;
case 48:

		addQuad(OPERATIONS.MOVE, -1, -1, -1);
	
break;
case 49:

		addQuad(OPERATIONS.ROTATE, -1, -1, -1);
	
break;
case 50:

		addQuad(OPERATIONS.PICKUP, -1, -1, -1);
	
break;
case 51:

		addQuad(OPERATIONS.PUTDOWN, -1, -1, -1);
	
break;
case 52:

		addQuad(OPERATIONS.PRINT, -1, -1, $$[$0-1].dir);
	
break;
case 53:

		this.$ = { dir: 999992 }
	
break;
case 54:

		this.$ = { dir: 999991 }
	
break;
case 55:

		this.$ = { dir: 999990 }
	
break;
case 56:

		var val = getVariableFromName($$[$0-1]);
		if(!val){
			// THROW ERROR
			throw new Error('No such var '+$$[$0-3] + ' - LINE: '+_$[$0-3].first_line);
		}
		if(!val.array){
			// THROW ERROR
			throw new Error('Var is not array '+$$[$0-3] + ' - LINE: '+_$[$0-3].first_line);
		}
		var t = addTemp();
		addQuad(OPERATIONS.LENGTH, val.dir, -1, t);
		this.$ = { dir: t }
	
break;
case 58:

		this.$ = $$[$0-1];
	
break;
case 59:

		this.$ = [ { name: $$[$0-3], type: $$[$0-1], array: false, size: 1 }, ...$$[$0] ]
	
break;
case 60:

		this.$ = [ { name: $$[$0-6], type: $$[$0-4], array: true, size: $$[$0-2] }, ...$$[$0] ]
	
break;
case 62:

		this.$ = [ { name: $$[$0-3], type: $$[$0-1] }, ...$$[$0] ]
	
break;
case 63:

		this.$ = [ { name: $$[$0-6], type: $$[$0-4], size: $$[$0-2] }, ...$$[$0] ]
	
break;
case 64:

		if($$[$0-1]=='start'){
			declareStart();
		}
		this.$ = declareFunction($$[$0-1], $$[$0]);
	
break;
case 66:

		currFunc = -1;
		addQuad(OPERATIONS.ENDPROC, -1, -1, -1);
	
break;
case 68:

	defineLoop();

break;
case 69:

	startLoop();

break;
case 70:

	endLoop();

break;
case 79:

		var dir = $$[$0].dir;
		if(!$$[$0].temp){
			var t = addTemp();
			addQuad(OPERATIONS.ASSIGN, dir, -1, t);
			dir = t;
		}
		addQuad(OPERATIONS.RETURN, -1, -1, dir);
		addQuad(OPERATIONS.ENDPROC, -1, -1, -1);
		this.$ = $$[$0];
	
break;
case 80:

	FUNCS[currFunc].return = true;

break;
case 83:
 
		addOperator(OPERATIONS.SUM);
		this.$ = OPERATIONS.SUM
	
break;
case 84:
 
		addOperator(OPERATIONS.MINUS);
		this.$ = OPERATIONS.MINUS
	
break;
case 85:
 
		addOperator(OPERATIONS.MULT);
		this.$ = OPERATIONS.MULT
	
break;
case 86:
 
		addOperator(OPERATIONS.DIVIDE);
		this.$ = OPERATIONS.DIVIDE
	
break;
case 87:
 
		addOperator(OPERATIONS.EQUALS);
		this.$ = OPERATIONS.EQUALS
	
break;
case 88:
 
		addOperator(OPERATIONS.GTRTHN);
		this.$ = OPERATIONS.GTRTHN
	
break;
case 89:
 
		addOperator(OPERATIONS.LESSTHN);
		this.$ = OPERATIONS.LESSTHN
	
break;
case 90:

		addOperator(OPERATIONS.GTR_EQTHN);
		this.$ = OPERATIONS.GTR_EQTHN
	
break;
case 91:

		addOperator(OPERATIONS.LESS_EQTHN);
		this.$ = OPERATIONS.LESS_EQTHN
	
break;
case 92:

		addOperator(OPERATIONS.AND);
		this.$ = OPERATIONS.AND;
	
break;
case 93:

		addOperator(OPERATIONS.OR);
		this.$ = OPERATIONS.OR;
	
break;
case 94:
 
		addOperator(OPERATIONS.NOT);
		this.$ = OPERATIONS.NOT
	
break;
case 95:

		addOperator(OPERATIONS.ASSIGN);
		this.$ = OPERATIONS.ASSIGN;
	
break;
}
},
table: [o($V0,[2,1],{4:1,3:2}),{1:[3]},{5:3,6:$V1,7:4,10:5,11:$V2,69:8,70:$V3,71:6},{6:[1,10]},{5:11,6:$V1,7:4,10:5,11:$V2,69:8,70:$V3,71:6},o($V0,[2,71]),o($V0,[2,72]),{12:12,19:$V4},o($V5,$V6,{8:14}),{19:[1,15]},{1:[2,2]},{6:[2,4]},{13:[1,16]},{13:[2,37],43:[1,17]},{9:19,10:22,11:$V2,18:21,19:$V7,39:25,40:31,51:23,52:$V8,54:[1,20],56:26,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,72:18,73:24,74:$Vi,79:$Vj},{34:[1,42],66:41},{14:43,81:$Vk,82:$Vl},{12:46,19:$V4},o($V0,[2,65]),o($Vm,[2,6]),o($V0,[2,66]),o($Vm,[2,73]),o($Vm,[2,74]),o($Vm,[2,75]),o($Vm,[2,76]),o($Vm,[2,77]),o($Vm,[2,78]),o($Vn,[2,80],{80:47}),o($Vm,$Vo,{20:48,15:[1,49],34:$Vp,94:$Vq}),o($Vn,[2,44],{53:52}),o($Vn,[2,68],{75:53}),o($Vr,[2,31]),{34:[1,54]},{34:[1,55]},{34:[1,56]},{34:[1,57]},{34:[1,58]},{34:[1,59]},{34:[1,60]},{34:[1,61]},{34:[1,62]},o($V5,[2,64]),{19:[1,65],35:[1,63],67:64},o($Vs,[2,7],{15:[1,66]}),o($Vt,[2,81]),o($Vt,[2,82]),{13:[2,38]},{16:$Vu,19:$Vv,21:67,26:69,27:68,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},{16:$Vu,19:$Vv,21:79,26:69,27:68,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},o($Vn,$Vz,{22:80}),o([16,19,34,35,37,38,62,63,64,65],$Vz,{22:81}),o($Vn,[2,95]),{16:$Vu,19:$Vv,21:82,26:69,27:68,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},{16:$Vu,19:$Vv,21:83,26:69,27:68,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},{35:[1,84]},{35:[1,85]},{35:[1,86]},{35:[1,87]},{16:$Vu,19:$Vv,21:88,26:69,27:68,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},{35:[1,89]},{35:[1,90]},{35:[1,91]},{19:[1,92]},o($V5,[2,57]),{35:[1,93]},{13:[1,94]},{16:[1,95]},o($Vm,[2,79]),o($VA,[2,14]),o($VA,$VB,{24:96,25:97,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ}),o($VK,[2,17],{29:106}),o($Vr,[2,20],{32:107}),o($Vn,$Vz,{22:108}),o($Vr,[2,24]),{16:[1,109]},o($Vr,[2,26]),o($Vr,[2,27]),o($Vr,[2,28]),o($Vr,$Vo,{15:[1,110],34:$Vp}),o($Vm,[2,9]),{16:$Vu,19:$Vv,21:111,26:69,27:68,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},{16:$Vu,19:$Vv,21:113,26:69,27:68,28:70,31:71,34:$Vw,35:[2,35],36:73,37:$Vx,38:$Vy,39:77,40:31,41:112,62:$Ve,63:$Vf,64:$Vg,65:$Vh},{48:114,49:$VL},{76:[1,115]},o($Vm,[2,48]),o($Vm,[2,49]),o($Vm,[2,50]),o($Vm,[2,51]),{35:[1,116]},o($Vr,[2,53]),o($Vr,[2,54]),o($Vr,[2,55]),{35:[1,117]},o($V5,[2,58]),{14:118,81:$Vk,82:$Vl},{17:[1,119]},o($VA,[2,13]),{16:$Vu,19:$Vv,26:120,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},o($Vn,[2,87]),o($Vn,[2,88]),o($Vn,[2,89]),o($Vn,[2,90]),o($Vn,[2,91]),o($Vn,[2,92]),o($Vn,[2,93]),o($Vn,[2,94]),o($VM,[2,15],{30:121,37:[1,123],83:[1,122]}),o($VK,[2,18],{33:124,84:[1,125],85:[1,126]}),{16:$Vu,19:$Vv,21:127,26:69,27:68,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},o($Vr,[2,25]),o($Vn,$Vz,{22:128}),{17:$VN,23:129},{23:130,35:$VN},{35:$VO,42:131,43:$VP},{49:[1,133]},o($V5,[2,69],{77:134}),o($Vm,[2,52]),o($Vr,[2,56]),{15:[1,136],35:$VQ,43:$VR,68:135},o($Vs,[2,8]),o($VA,$VB,{25:97,24:138,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ}),{16:$Vu,19:$Vv,26:139,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},o($Vn,[2,83]),o($Vn,[2,84]),{16:$Vu,19:$Vv,28:140,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},o($Vn,[2,85]),o($Vn,[2,86]),{23:141,35:$VN},{16:$Vu,19:$Vv,21:142,26:69,27:68,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},{17:[1,143]},{35:[1,144]},{35:[2,36]},{16:$Vu,19:$Vv,21:145,26:69,27:68,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},o($Vm,$V6,{8:146}),o($V5,$V6,{8:147}),{35:[2,59]},{16:[1,148]},{19:[1,149]},o($VA,[2,12]),o($VM,[2,16]),o($VK,[2,19]),{35:[1,150]},{17:$VN,23:151},o($Vm,$VS,{20:152,94:$Vq}),o($Vr,[2,32]),{35:$VO,42:153,43:$VP},o($VT,$VU,{9:19,18:21,10:22,51:23,73:24,39:25,56:26,40:31,50:154,11:$V2,19:$V7,52:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,74:$Vi,79:$Vj}),{9:19,10:22,11:$V2,18:21,19:$V7,39:25,40:31,51:23,52:$V8,54:[2,70],56:26,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,73:24,74:$Vi,78:155,79:$Vj},{17:[1,156]},{13:[1,157]},o($Vr,[2,23]),{17:[1,158]},{16:$Vu,19:$Vv,21:159,26:69,27:68,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},{35:[2,34]},o($VV,$VW,{46:160,47:$VX}),{54:[1,162]},{35:$VQ,43:$VR,68:163},{14:164,81:$Vk,82:$Vl},o($Vr,$VS),o($Vm,[2,10]),{44:165,45:[1,166],54:[2,39]},{16:$Vu,19:$Vv,21:167,26:69,27:68,28:70,31:71,34:$Vw,36:73,37:$Vx,38:$Vy,39:77,40:31,62:$Ve,63:$Vf,64:$Vg,65:$Vh},o($Vm,[2,67]),{35:[2,60]},{15:[1,169],35:$VQ,43:$VR,68:168},{54:[1,170]},o($V5,$V6,{8:171}),{48:172,49:$VL},{35:[2,62]},{16:[1,173]},o($Vm,[2,43]),{9:19,10:22,11:$V2,18:21,19:$V7,39:25,40:31,51:23,52:$V8,54:[2,40],56:26,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,73:24,74:$Vi,79:$Vj},{49:[1,174]},{17:[1,175]},o($Vm,$V6,{8:176}),{35:$VQ,43:$VR,68:177},o($VT,$VU,{9:19,18:21,10:22,51:23,73:24,39:25,56:26,40:31,50:178,11:$V2,19:$V7,52:$V8,57:$V9,58:$Va,59:$Vb,60:$Vc,61:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,74:$Vi,79:$Vj}),{35:[2,63]},o($VV,$VW,{46:179,47:$VX}),o($VV,[2,42])],
defaultActions: {10:[2,2],11:[2,4],46:[2,38],131:[2,36],135:[2,59],153:[2,34],163:[2,60],168:[2,62],177:[2,63]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var QUADS = [];
	var VARS = [];
	var CONST = [];
	var FUNCS = [];
	var TEMPS = 0;

	var opStack = [];
	var valStack = [];
	var jumpStack = [];
	var elseStack = [];
	var count = 0;
	var currFunc = -1;

	var OPERATIONS = {
		ASSIGN: 0,
		SUM: 1,
		MINUS: 2,
		MULT: 3,
		DIVIDE: 4,
		AND: 5,
		NOT: 6,
		OR: 7,
		EQUALS: 8,
		GTRTHN: 9,
		LESSTHN: 10,
		GTR_EQTHN: 11,
		LESS_EQTHN: 12,
		ASSIGN: 13,
		GOTO: 14,
		GOTOF: 15,
		GOTOT: 16,
		PRINT: 17,

		ERA: 18,
		GOSUB: 19,
		ENDPROC: 20,
		RETURN: 21,
		PARAM: 22,
		VERIFY: 23,
		LENGTH: 24,
		VALDIR: 25,

		MOVE: 26,
		ROTATE: 27,
		PICKUP: 28,
		PUTDOWN: 29
	}

	function begin(){
		QUADS = [];
		VARS = [];
		CONST = [];
		FUNCS = [];

		opStack = [];
		valStack = [];
		jumpStack = [];
		count = 0;
		currFunc = -1;
	}

	function declareStart(){
		if(QUADS[1][3]!=null) return;
		QUADS[1][3] = count;
	}

	// Executes right after "then"
	function startIf(){
		var cond = valStack.pop();
		addQuad(OPERATIONS.GOTOF, cond, -1, null);
		jumpStack.push(count-1);
	}

	// Executes before if "end"
	function endIf(){
		var jump = jumpStack.pop();
		QUADS[jump][3] = count;
	}

	// Executes before if "else"
	function elseIf(){
		var f = jumpStack.pop();
		addQuad(OPERATIONS.GOTO, -1, -1, null);
		jumpStack.push(count-1);
		console.log(f)
		QUADS[f][3] = count;
	}

	// Declares a function. After "fun"
	function declareFunction(name, params){
		if(FUNCS.findIndex(a=>a.name==name)!=-1){
			//TODO: THROW ERR
			return;
		}
		if(VARS.findIndex(a=>a.name==name)!=-1){
			//TODO: THROW ERR
			return;
		}
		var vars = [];
		for(var i of params){
			// var j = defineVariable(`${name}#${i.name}`, i.type)
			vars.push({ ...i, dir: vars.length+10000 });
		}
		FUNCS.push({
			name,
			params,
			vars,
			dir: count,
			temps: 0,
			start: name=='start'
		});
		currFunc = FUNCS.length-1;
		VARS.push({
			name, type: 'func', val: -1, function: true
		});
		return FUNCS.length-1;
	}

	// Declares a repeat. After "repeat"
	function defineLoop(){
		jumpStack.push(count);
	}

	// Declares that a loop started. After "do"
	function startLoop(){
		addQuad(OPERATIONS.GOTOF, valStack.pop(), -1, null);
		jumpStack.push(count-1);
	}

	// Declares that a loop has ended. Before "end"
	function endLoop(){
		var f = jumpStack.pop();
		var ret = jumpStack.pop();
		addQuad(OPERATIONS.GOTO, -1, -1, ret);
		QUADS[f][3] = count;
	}

	function functionCall(name, params){
		var func = FUNCS.find(a=>a.name==name);
		if(!func){
			// TODO: THROW ERROR
			console.log("Invalid function");
			return false;
		}
		if(func.params.length!=params.length){
			// TODO: THROW ERROR
			console.log("Incorrect params length");
			return false;
		}
		addQuad(OPERATIONS.ERA, name, -1, -1);
		for(var i=0; i<params.length; i++){
			addQuad(OPERATIONS.PARAM, i, -1, params[i].dir)
			valStack.pop();
		}
		addQuad(OPERATIONS.GOSUB, -1, -1, func.dir);

		if(func.return){
			return FUNCS.find(a=>a.name==name);
		}else{
			return { dir: -1 }
		}
	}

	function addConstant(val){
		var i = CONST.findIndex(a=>val==a);
		if(i!=-1) return i+100000;
		var dir = CONST.length+100000;
		CONST.push(val);
		return dir;
	}

	function getConstant(dir){
		if(dir<100000) return -1;
		return CONST[dir];
	}

	// Add temporary var and return its direction.
	function addTemp(){
		var dir = FUNCS[currFunc].temps+20000;
		FUNCS[currFunc].temps++;
		return dir;
	}

	// Defines a variable
	function defineVariable(name, type, size=false){
		var bank = currFunc==-1 ? VARS : FUNCS[currFunc].vars
		var dir = bank.reduce((a,b)=>a+b.size, 0) + (currFunc==-1 ? 0 : 10000);
		var newVal = {
			name, type, dir,
		}
		newVal.array = size ? true : false;
		newVal.size = (size || 1);
		if(currFunc==-1){
			VARS.push(newVal);
		}else{
			FUNCS[currFunc].vars.push(newVal);
		}
		return dir;
	}

	// Set the variable value, index is optional for array
	function setVariable(dir, value){
		VARS[dir] = value;
	}

	// Get a variable value
	function getVariable(dir){
		if(dir==-1) return false;
		if(dir>=10000 && dir<10000){ // FUNCTION VAR
			return {
				...FUNCS[currFunc].vars[dir-10000],
				dir
			}
		}else if(dir>=20000 && dir<100000){ // TEMP
			return {
				name: 't'+(dir-20000),
				val: FUNCS[currFunc].temps[dir-20000],
				dir,
				temp: true
			}
		}else if(dir>=100000 && dir<999990){ // CONSTANT
			return {
				name: CONST[dir-100000].toString(),
				val: CONST[dir-100000],
				dir,
				constant: true
			}
		}else if(dir>999990 && dir<1000000){ // SPECIALS
			var name;
			switch(dir){
				case 999990: // INVENTORY
					name = 'INV'
				break;
				case 999991: // CHECK WALL
					name = 'WALL'
				break;
				case 999992: // CHECK BOX
					name = 'BOX'
				break;
			}
			return { name, dir }
		}else if(dir>=1000000){
			var v = getVariable(dir-1000000);;
			v.name = '(' + v.name + ')';
			return v;
		}else{
			return {
				...VARS[dir],
				dir
			}
		}
	}

	function getVariableFromName(name){
		var ix;
		var isFunc = currFunc!=-1;
		if(isFunc){
			var func = FUNCS[currFunc];
			ix = func.vars.findIndex(a=>a.name==name);
			if(ix==-1) {
				ix = VARS.findIndex(a=>a.name==name);
				return VARS[ix];
			}
			return FUNCS[currFunc].vars[ix];
		}
		ix = VARS.findIndex(a=>a.name==name);
		var val = VARS[ix]; 
		return VARS[ix];
	}

	function addQuad(opCode, dir1, dir2, dir3){
		// console.log(`${count}:\t ${opGetSymbol(opCode)}\t${dir1}\t${dir2}\t${dir3}\t`)
		QUADS.push([opCode, dir1, dir2, dir3]);
		count += 1;
		return dir3;
	}

	function opGetSymbol(op){
		var t = [
			'+','-','x','/','AND','!=','OR','==','>','<','>=','<=','=', 
			'GOTO', 'GOTOF', 'GOTOT', 'PRINT',
			'ERA', 'GOSUB', 'END', 'RET', 'PARAM', 
			'VER', 'LEN', 'VALDIR',
			'MOVE', 'ROT', 'PKUP', 'PDWN'
		];
		return t[parseInt(op-1)];
	}

	function prettyQuads(qu){
		if(!qu) qu = QUADS;
		var q = []
		for(var i of qu){
			var v1 = getVariable(i[1]);
			var v2 = getVariable(i[2]);
			var v3 = getVariable(i[3]);
			if(i[0]==OPERATIONS.PARAM){
				v1 = { name: i[1] };
				v2 = false;
			}
			if(i[0]==OPERATIONS.ERA){
				v1 = { name: i[1] };
				v2 = false;
				v3 = false;
			}


			var v4 = i[0]>=12 && i[0]<=14 ? i[3] : (v3 ? ((v3.temp && v3.val) ? v3.val : v3.name) : -1);
			if(i[0]==OPERATIONS.VERIFY){
				v2 = { name: i[2] };
				v4 = i[3];
			}
			q.push([
				opGetSymbol(i[0]),
				i[1],
				i[2],
				i[3]
				// (v1!==false ? ((v1.temp && v1.val) ? v1.val : v1.name) : -1),
				// (v2!==false ? ((v2.temp && v2.val) ? v2.val : v2.name) : -1),
				// v4
			])
		}
		return q;
	}

	function addOperator(op){
		opStack.push(op);
	}

	function generateQuad(){
		var peek = opStack.pop();
		var temp;
		var valDer = valStack.pop(), valIz = valStack.pop();

		if(peek==OPERATIONS.ASSIGN){
			temp = valIz;
		}else{
			temp = addTemp();
		}
		addQuad(peek, peek==OPERATIONS.ASSIGN ? valDer : valIz, peek==OPERATIONS.ASSIGN ? -1 : valDer, temp)
		valStack.push(temp);
		return { dir: temp }
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 38
break;
case 2:return 11
break;
case 3:return 84
break;
case 4:return 85
break;
case 5:return 37
break;
case 6:return 83
break;
case 7:return 34
break;
case 8:return 35
break;
case 9:return 43
break;
case 10:return 13
break;
case 11:return 15
break;
case 12:return 17
break;
case 13:return 81
break;
case 14:return 82
break;
case 15:return 45
break;
case 16:return 47
break;
case 17:return 86
break;
case 18:return 89
break;
case 19:return 90
break;
case 20:return 87
break;
case 21:return 88
break;
case 22:return 93
break;
case 23:return 91
break;
case 24:return 92
break;
case 25:return 52
break;
case 26:return 49
break;
case 27:return 54
break;
case 28:return 70
break;
case 29:return 74
break;
case 30:return 76
break;
case 31:return 79
break;
case 32:return 61
break;
case 33:return 65
break;
case 34:return 57
break;
case 35:return 58
break;
case 36:return 59
break;
case 37:return 60
break;
case 38:return 62
break;
case 39:return 63
break;
case 40:return 64
break;
case 41:return 16
break;
case 42:return 19
break;
case 43:return 94
break;
case 44:return 6
break;
}
},
rules: [/^(?:\s+)/,/^(?:(true|false))/,/^(?:def\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:decimal\b)/,/^(?:bool\b)/,/^(?:else\b)/,/^(?:elseif\b)/,/^(?:==)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:(not|NOT|!=))/,/^(?:(and|AND|&&))/,/^(?:(or|OR|\|\|))/,/^(?:if\b)/,/^(?:then\b)/,/^(?:end\b)/,/^(?:fun\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:print\b)/,/^(?:length\b)/,/^(?:forward\b)/,/^(?:rotateRight\b)/,/^(?:pickUp\b)/,/^(?:putDown\b)/,/^(?:detectBox\b)/,/^(?:detectWall\b)/,/^(?:inventory\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z][a-zA-Z_]*)/,/^(?:=)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = spook;
exports.Parser = spook.Parser;
exports.parse = function () { return spook.parse.apply(spook, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}